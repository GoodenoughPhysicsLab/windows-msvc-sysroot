#include<fast_io.h>
#include<fast_io_device.h>
#include<fast_io_dsal/string_view.h>

int main(int argc,char **argv)
{
    using namespace fast_io::mnp;
    using namespace fast_io::io;
    if (argc < 2)
    {
    if (argc==0)
    {
        return 1;
    }
    perr("Usage: ",os_c_str(*argv)," <sysroot path>\n");
    return 1;
    }
    fast_io::dir_file sysrootdirf(os_c_str(*argv));
    fast_io::dir_file dirf(at(sysrootdirf),u8"include/winrt");
    ::fast_io::u8obuf_file obf(u8"winrt.ixx");
    print(obf,u8R"(// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.3.4.5

module;

#include <intrin.h>
#include <algorithm>
#include <array>
#include <atomic>
#include <charconv>
#include <chrono>
#include <cstddef>
#include <cstring>
#include <exception>
#include <iterator>
#include <map>
#include <memory>
#include <optional>
#include <stdexcept>
#include <string_view>
#include <string>
#include <thread>
#include <tuple>
#include <type_traits>
#include <unordered_map>
#include <utility>
#include <vector>

#if __has_include(<version>)
#include <version>
#endif

#if __has_include(<windowsnumerics.impl.h>)
#define WINRT_IMPL_NUMERICS
#include <directxmath.h>
#endif

#ifndef WINRT_LEAN_AND_MEAN
#include <ostream>
#endif

#ifdef __cpp_lib_span
#include <span>
#endif

#ifdef __cpp_lib_format
#include <format>
#endif

#ifdef __cpp_lib_source_location
#include <source_location>
#endif

#ifdef __cpp_lib_coroutine

#include <coroutine>

namespace winrt::impl
{
    template <typename T = void>
    using coroutine_handle = std::coroutine_handle<T>;

    using suspend_always = std::suspend_always;
    using suspend_never = std::suspend_never;
}

#elif __has_include(<experimental/coroutine>)

#include <experimental/coroutine>

namespace winrt::impl
{
    template <typename T = void>
    using coroutine_handle = std::experimental::coroutine_handle<T>;

    using suspend_always = std::experimental::suspend_always;
    using suspend_never = std::experimental::suspend_never;
}

#else
#error C++/WinRT requires coroutine support, which is currently missing. Try enabling C++20 in your compiler.
#endif

export module winrt;
#define WINRT_EXPORT export

)");
    for(auto ent : current(at(dirf)))
    {
        if(type(ent)!=::fast_io::file_type::regular)
        {
            continue;
        }
        ::fast_io::u8string_view vw(u8extension(ent));
        if(vw==u8".h")
        {
            print(obf,u8"#include \"winrt/",u8filename(ent),u8"\"\n");
        }
    }
}