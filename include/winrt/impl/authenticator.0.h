// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Authenticator_0_H
#define WINRT_Authenticator_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls
{
    struct Grid;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Markup
{
    struct IXamlMetadataProvider;
}
WINRT_EXPORT namespace winrt::Authenticator
{
    struct IDetail;
    struct ISettings;
    struct IWindow;
    struct Detail;
    struct Settings;
    struct Window;
    struct XamlMetaDataProvider;
}
namespace winrt::impl
{
    template <> struct category<winrt::Authenticator::IDetail>{ using type = interface_category; };
    template <> struct category<winrt::Authenticator::ISettings>{ using type = interface_category; };
    template <> struct category<winrt::Authenticator::IWindow>{ using type = interface_category; };
    template <> struct category<winrt::Authenticator::Detail>{ using type = class_category; };
    template <> struct category<winrt::Authenticator::Settings>{ using type = class_category; };
    template <> struct category<winrt::Authenticator::Window>{ using type = class_category; };
    template <> struct category<winrt::Authenticator::XamlMetaDataProvider>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::Authenticator::Detail> = L"Authenticator.Detail";
    template <> inline constexpr auto& name_v<winrt::Authenticator::Settings> = L"Authenticator.Settings";
    template <> inline constexpr auto& name_v<winrt::Authenticator::Window> = L"Authenticator.Window";
    template <> inline constexpr auto& name_v<winrt::Authenticator::XamlMetaDataProvider> = L"Authenticator.XamlMetaDataProvider";
    template <> inline constexpr auto& name_v<winrt::Authenticator::IDetail> = L"Authenticator.IDetail";
    template <> inline constexpr auto& name_v<winrt::Authenticator::ISettings> = L"Authenticator.ISettings";
    template <> inline constexpr auto& name_v<winrt::Authenticator::IWindow> = L"Authenticator.IWindow";
    template <> inline constexpr guid guid_v<winrt::Authenticator::IDetail>{ 0xAC90B65A,0x8970,0x5B05,{ 0x99,0x0B,0x07,0x28,0x30,0x07,0x88,0x99 } }; // AC90B65A-8970-5B05-990B-072830078899
    template <> inline constexpr guid guid_v<winrt::Authenticator::ISettings>{ 0xF78BBBA2,0x5441,0x55BB,{ 0x99,0x4E,0x38,0x74,0x7D,0x61,0xE9,0x9B } }; // F78BBBA2-5441-55BB-994E-38747D61E99B
    template <> inline constexpr guid guid_v<winrt::Authenticator::IWindow>{ 0x11CB4DCB,0x4408,0x58DC,{ 0x98,0x76,0x3E,0xF6,0x48,0x1A,0xA1,0x96 } }; // 11CB4DCB-4408-58DC-9876-3EF6481AA196
    template <> struct default_interface<winrt::Authenticator::Detail>{ using type = winrt::Authenticator::IDetail; };
    template <> struct default_interface<winrt::Authenticator::Settings>{ using type = winrt::Authenticator::ISettings; };
    template <> struct default_interface<winrt::Authenticator::Window>{ using type = winrt::Authenticator::IWindow; };
    template <> struct default_interface<winrt::Authenticator::XamlMetaDataProvider>{ using type = winrt::Microsoft::UI::Xaml::Markup::IXamlMetadataProvider; };
    template <> struct abi<winrt::Authenticator::IDetail>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Authenticator::ISettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Authenticator::IWindow>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TitleBar(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Authenticator_IDetail
    {
    };
    template <> struct consume<winrt::Authenticator::IDetail>
    {
        template <typename D> using type = consume_Authenticator_IDetail<D>;
    };
    template <typename D>
    struct consume_Authenticator_ISettings
    {
    };
    template <> struct consume<winrt::Authenticator::ISettings>
    {
        template <typename D> using type = consume_Authenticator_ISettings<D>;
    };
    template <typename D>
    struct consume_Authenticator_IWindow
    {
        [[nodiscard]] auto TitleBar() const;
    };
    template <> struct consume<winrt::Authenticator::IWindow>
    {
        template <typename D> using type = consume_Authenticator_IWindow<D>;
    };
}
#endif
