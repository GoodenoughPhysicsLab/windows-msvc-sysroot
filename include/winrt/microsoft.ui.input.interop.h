// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.3.4.5

#pragma once
#ifndef WINRT_Microsoft_UI_Input_Interop_H
#define WINRT_Microsoft_UI_Input_Interop_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.3.4.5"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.3.4.5"
#include "winrt/microsoft.ui.input.h"
#include "winrt/impl/microsoft.ui.input.2.h"
#include "winrt/impl/windows.devices.input.2.h"
#include "winrt/impl/microsoft.ui.input.interop.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_UI_Input_Interop_IPenDeviceInteropStatics<D>::FromPointerPoint(winrt::Microsoft::UI::Input::PointerPoint const& pointerPoint) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::UI::Input::Interop::IPenDeviceInteropStatics>)
        {
            auto const [_winrt_casted_result, _winrt_cast_result_code] = impl::try_as_with_reason<winrt::Microsoft::UI::Input::Interop::IPenDeviceInteropStatics, D const*>(static_cast<D const*>(this));
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Input::Interop::IPenDeviceInteropStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->FromPointerPoint(*(void**)(&pointerPoint), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Input::Interop::IPenDeviceInteropStatics>**)this;
            check_hresult(_winrt_abi_type->FromPointerPoint(*(void**)(&pointerPoint), &result));
        }
        return winrt::Windows::Devices::Input::PenDevice{ result, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Interop::IPenDeviceInteropStatics> : produce_base<D, winrt::Microsoft::UI::Input::Interop::IPenDeviceInteropStatics>
    {
        int32_t __stdcall FromPointerPoint(void* pointerPoint, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Devices::Input::PenDevice>(this->shim().FromPointerPoint(*reinterpret_cast<winrt::Microsoft::UI::Input::PointerPoint const*>(&pointerPoint)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Input::Interop
{
    inline auto PenDeviceInterop::FromPointerPoint(winrt::Microsoft::UI::Input::PointerPoint const& pointerPoint)
    {
        return impl::call_factory<PenDeviceInterop, IPenDeviceInteropStatics>([&](IPenDeviceInteropStatics const& f) { return f.FromPointerPoint(pointerPoint); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::UI::Input::Interop::IPenDeviceInteropStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Interop::PenDeviceInterop> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
